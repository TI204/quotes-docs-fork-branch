{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation Programming Quotes [nom-groupe] Programming Quotes est petite application qui permet d'afficher des citations humouristique de programmeurs. Membres du groupe Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Quotes Documentation Contributeur : Dylan Hamadouche Fork GitHub : https://github.com/DylanBlk/Dylanblk ======= index.md # The documentation homepage. ======= * Contributeur-1 : Dylan Hamadouche https://github.com/DylanBlk/Dylanblk","title":"Home"},{"location":"#documentation-programming-quotes-nom-groupe","text":"Programming Quotes est petite application qui permet d'afficher des citations humouristique de programmeurs.","title":"Documentation Programming Quotes [nom-groupe]"},{"location":"#membres-du-groupe","text":"","title":"Membres du groupe"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#quotes-documentation","text":"Contributeur : Dylan Hamadouche Fork GitHub : https://github.com/DylanBlk/Dylanblk ======= index.md # The documentation homepage. ======= * Contributeur-1 : Dylan Hamadouche https://github.com/DylanBlk/Dylanblk","title":"Quotes Documentation"},{"location":"features/features/","text":"Main files main.py : Main file of the application. quotes.txt : File containing the quotes. functions.py : File containing the functions used in the application. Usage Clone the repository and run the following command to start the application: $ git clone <url-du-TP4/quotes> $ cd quotes $ python main.py ======= Features and commands random : Get a random programming quote display : Display multiple quotes add : Add a new quote to your collection exit : Exit anytime Example $ python main.py ==== Programming Quotes ==== random : Random quote display : Display quotes add : Add a new quote exit : Exit the program >> random Why do programmers prefer dark chocolate? Because it's byte-sized!","title":"Features"},{"location":"features/features/#main-files","text":"main.py : Main file of the application. quotes.txt : File containing the quotes. functions.py : File containing the functions used in the application.","title":"Main files"},{"location":"features/features/#usage","text":"Clone the repository and run the following command to start the application: $ git clone <url-du-TP4/quotes> $ cd quotes $ python main.py =======","title":"Usage"},{"location":"features/features/#features-and-commands","text":"random : Get a random programming quote display : Display multiple quotes add : Add a new quote to your collection exit : Exit anytime","title":"Features and commands"},{"location":"features/features/#example","text":"$ python main.py ==== Programming Quotes ==== random : Random quote display : Display quotes add : Add a new quote exit : Exit the program >> random Why do programmers prefer dark chocolate? Because it's byte-sized!","title":"Example"},{"location":"features/functions/","text":"Core functions File functions.py load_quotes(filename) def load_quotes(filename): \"\"\" Loads quotes from a file and returns them as a list. Parameters: filename (str): The path to the file containing quotes. The function reads the file line by line, strips whitespace, and appends non-empty lines to a list. Each line in the file should contain one quote. Returns: list: A list of quotes loaded from the file. Example: load_quotes('quotes.txt') This function reads the file 'quotes.txt' and returns a list of quotes. \"\"\" quotes = [] with open(filename, 'r') as file: lines = file.readlines() for line in lines: line = line.strip() if line: quotes.append(line) return quotes random_quote(quotes) def random_quote(quotes): \"\"\" Returns a random quote from the provided list of quotes. Parameters: quotes (list): A list of quotes from which a random quote will be selected. The function uses the random.choice() method to select a random quote. Returns: str: A randomly selected quote from the list. Example: random_quote(['Quote 1', 'Quote 2', 'Quote 3']) This function returns a random quote from the provided list. \"\"\" random_quote = random.choice(quotes) return random_quote print_quote(quote) def print_quote(quote): \"\"\" Prints a single quote to the console. Parameters: quote (str): The quote to be printed. The function formats the quote with asterisks and prints it to the console. Returns: None Example: print_quote('This is a quote.') \"\"\" print(quote) def view_quotes(quotes): \"\"\" Prints all quotes in the provided list to the console. Parameters: quotes (list): A list of quotes to be printed. The function iterates through the list and prints each quote using the Returns: None Example: view_quotes(['Quote 1', 'Quote 2', 'Quote 3']) This function prints each quote in the provided list. \"\"\" for quote in quotes: print_quote(quote) add_quote(quotes, filename) def add_quote(quotes, filename): \"\"\" Adds a new quote to the list of quotes and appends it to a file. Parameters: quotes (list): A list of existing quotes to which the new quote will be added. filename (str): The path to the file where the new quote will be appended. The function prompts the user to input a new quote, appends it to the provided list of quotes, and writes it to the specified file. Each quote is written on a new line in the file. Returns: None Example: add_quote(['Quote 1', 'Quote 2'], 'quotes.txt') \"\"\" new_quote = input(\"Enter a new quote: \") quotes.append(new_quote) with open(filename, 'a') as file: file.write(new_quote) file.write('\\n') print(\"Quote added successfully!\") display_quotes(quotes, count) def display_quotes(quotes, count): \"\"\" Displays a specified number of quotes from the provided list. Parameters: quotes (list): A list of quotes to be displayed. count (int): The number of quotes to display. If count is greater than the length of the list, all quotes will be displayed. The function checks if the count is valid and prints the specified number of quotes. If the count exceeds the number of available quotes, it prints all quotes. Returns: None Example: display_quotes(['Quote 1', 'Quote 2', 'Quote 3'], 2) This function prints the first 2 quotes from the provided list. \"\"\" if count >= len(quotes): print(\"All Quotes:\") view_quotes(quotes) else: print(f\"First {count} Quotes:\") for i in range(count): print_quote(quotes[i])","title":"Core Functions"},{"location":"features/functions/#core-functions","text":"","title":"Core functions"},{"location":"features/functions/#file-functionspy","text":"","title":"File functions.py"},{"location":"features/functions/#load_quotesfilename","text":"def load_quotes(filename): \"\"\" Loads quotes from a file and returns them as a list. Parameters: filename (str): The path to the file containing quotes. The function reads the file line by line, strips whitespace, and appends non-empty lines to a list. Each line in the file should contain one quote. Returns: list: A list of quotes loaded from the file. Example: load_quotes('quotes.txt') This function reads the file 'quotes.txt' and returns a list of quotes. \"\"\" quotes = [] with open(filename, 'r') as file: lines = file.readlines() for line in lines: line = line.strip() if line: quotes.append(line) return quotes","title":"load_quotes(filename)"},{"location":"features/functions/#random_quotequotes","text":"def random_quote(quotes): \"\"\" Returns a random quote from the provided list of quotes. Parameters: quotes (list): A list of quotes from which a random quote will be selected. The function uses the random.choice() method to select a random quote. Returns: str: A randomly selected quote from the list. Example: random_quote(['Quote 1', 'Quote 2', 'Quote 3']) This function returns a random quote from the provided list. \"\"\" random_quote = random.choice(quotes) return random_quote","title":"random_quote(quotes)"},{"location":"features/functions/#print_quotequote","text":"def print_quote(quote): \"\"\" Prints a single quote to the console. Parameters: quote (str): The quote to be printed. The function formats the quote with asterisks and prints it to the console. Returns: None Example: print_quote('This is a quote.') \"\"\" print(quote) def view_quotes(quotes): \"\"\" Prints all quotes in the provided list to the console. Parameters: quotes (list): A list of quotes to be printed. The function iterates through the list and prints each quote using the Returns: None Example: view_quotes(['Quote 1', 'Quote 2', 'Quote 3']) This function prints each quote in the provided list. \"\"\" for quote in quotes: print_quote(quote)","title":"print_quote(quote)"},{"location":"features/functions/#add_quotequotes-filename","text":"def add_quote(quotes, filename): \"\"\" Adds a new quote to the list of quotes and appends it to a file. Parameters: quotes (list): A list of existing quotes to which the new quote will be added. filename (str): The path to the file where the new quote will be appended. The function prompts the user to input a new quote, appends it to the provided list of quotes, and writes it to the specified file. Each quote is written on a new line in the file. Returns: None Example: add_quote(['Quote 1', 'Quote 2'], 'quotes.txt') \"\"\" new_quote = input(\"Enter a new quote: \") quotes.append(new_quote) with open(filename, 'a') as file: file.write(new_quote) file.write('\\n') print(\"Quote added successfully!\")","title":"add_quote(quotes, filename)"},{"location":"features/functions/#display_quotesquotes-count","text":"def display_quotes(quotes, count): \"\"\" Displays a specified number of quotes from the provided list. Parameters: quotes (list): A list of quotes to be displayed. count (int): The number of quotes to display. If count is greater than the length of the list, all quotes will be displayed. The function checks if the count is valid and prints the specified number of quotes. If the count exceeds the number of available quotes, it prints all quotes. Returns: None Example: display_quotes(['Quote 1', 'Quote 2', 'Quote 3'], 2) This function prints the first 2 quotes from the provided list. \"\"\" if count >= len(quotes): print(\"All Quotes:\") view_quotes(quotes) else: print(f\"First {count} Quotes:\") for i in range(count): print_quote(quotes[i])","title":"display_quotes(quotes, count)"},{"location":"features/user-interface/","text":"Interface File main.py menu() def menu(): \"\"\" Displays the menu options for the user. The menu includes options to display a random quote, display a specified number of quotes, add a new quote, and exit the program. Returns: None \"\"\" print(\"\\n==== Programming Quotes ====\") print(\"random : Random quote\") print(\"display : Display quotes\") print(\"add : Add a new quote\") print(\"exit : Exit the program\") main() def main(): \"\"\" Main function to run the program. It loads quotes from a file, displays the menu, and processes user input to perform actions based on the user's choice. Returns: None \"\"\" while True: quotes = load_quotes(\"quotes.txt\") menu() choice = input(\">> \") if choice == \"random\": print_quote(random_quote(quotes)) elif choice == \"display\": count = int(input(\"Enter the number of quotes to display: \")) display_quotes(quotes, count) elif choice == \"add\": add_quote(quotes, \"quotes.txt\") elif choice == \"exit\": print(\"Good bye...\") break else: print(\"Invalid input\")","title":"User Interface"},{"location":"features/user-interface/#interface","text":"","title":"Interface"},{"location":"features/user-interface/#file-mainpy","text":"","title":"File main.py"},{"location":"features/user-interface/#menu","text":"def menu(): \"\"\" Displays the menu options for the user. The menu includes options to display a random quote, display a specified number of quotes, add a new quote, and exit the program. Returns: None \"\"\" print(\"\\n==== Programming Quotes ====\") print(\"random : Random quote\") print(\"display : Display quotes\") print(\"add : Add a new quote\") print(\"exit : Exit the program\")","title":"menu()"},{"location":"features/user-interface/#main","text":"def main(): \"\"\" Main function to run the program. It loads quotes from a file, displays the menu, and processes user input to perform actions based on the user's choice. Returns: None \"\"\" while True: quotes = load_quotes(\"quotes.txt\") menu() choice = input(\">> \") if choice == \"random\": print_quote(random_quote(quotes)) elif choice == \"display\": count = int(input(\"Enter the number of quotes to display: \")) display_quotes(quotes, count) elif choice == \"add\": add_quote(quotes, \"quotes.txt\") elif choice == \"exit\": print(\"Good bye...\") break else: print(\"Invalid input\")","title":"main()"},{"location":"logs/log-contributeur-1/","text":"Log Contributor 1 9e8894c Add features.md (Contributor 1) b69b148 Complete index.md and README.md (Contributor 1)","title":"Contributeur 1"},{"location":"logs/log-contributeur-1/#log-contributor-1","text":"9e8894c Add features.md (Contributor 1) b69b148 Complete index.md and README.md (Contributor 1)","title":"Log Contributor 1"},{"location":"logs/log-contributeur-3/","text":"Log Contributeur 3 commit 1f9bbac79f50346d47fe60fd4dd70b9df723d442 Merge: bcaaac2 5755e35 Author: Ch3rry <74537660+ch3rry0@users.noreply.github.com> Date: Tue Apr 15 10:25:08 2025 +0200 Merge pull request #2 from TI204/contributeur-3 Merge contibuteur-3 to main commit 5755e3555465588bf91348ffc26fe3ec087b56ea (HEAD -> contributeur-3, origin/contributeur-3) Merge: 850ee0d bcaaac2 Author: Ch3rry <74537660+ch3rry0@users.noreply.github.com> Date: Tue Apr 15 10:24:52 2025 +0200 Merge branch 'main' into contributeur-3 commit 850ee0df03500e86047deddd8ed69302317ecb18 Author: Ch3rry <74537660+ch3rry0@users.noreply.github.com> Date: Tue Apr 15 10:16:55 2025 +0200 Added user-interface.md file commit bcaaac2ae64ec638a035af69c7d555d3e382cc25 Author: Ch3rry <74537660+ch3rry0@users.noreply.github.com> Date: Tue Apr 15 10:12:04 2025 +0200 Added Interface to Menu commit 3eae8296718cb8f9b4af6ddd4f15f27a100bf1af Author: MOUAHA <mouahajoyce25@gmail.com> Date: Tue Apr 15 09:55:49 2025 +0200 Initial commit commit a7f7260d464659c71e7ff6b551a3b9ac6ccf8433 Author: Ch3rry <74537660+ch3rry0@users.noreply.github.com> Date: Tue Apr 15 09:32:36 2025 +0200 Complete index.md and README.md (Contributeur-3)","title":"Contributeur 3"},{"location":"logs/log-contributeur-3/#log-contributeur-3","text":"commit 1f9bbac79f50346d47fe60fd4dd70b9df723d442 Merge: bcaaac2 5755e35 Author: Ch3rry <74537660+ch3rry0@users.noreply.github.com> Date: Tue Apr 15 10:25:08 2025 +0200 Merge pull request #2 from TI204/contributeur-3 Merge contibuteur-3 to main commit 5755e3555465588bf91348ffc26fe3ec087b56ea (HEAD -> contributeur-3, origin/contributeur-3) Merge: 850ee0d bcaaac2 Author: Ch3rry <74537660+ch3rry0@users.noreply.github.com> Date: Tue Apr 15 10:24:52 2025 +0200 Merge branch 'main' into contributeur-3 commit 850ee0df03500e86047deddd8ed69302317ecb18 Author: Ch3rry <74537660+ch3rry0@users.noreply.github.com> Date: Tue Apr 15 10:16:55 2025 +0200 Added user-interface.md file commit bcaaac2ae64ec638a035af69c7d555d3e382cc25 Author: Ch3rry <74537660+ch3rry0@users.noreply.github.com> Date: Tue Apr 15 10:12:04 2025 +0200 Added Interface to Menu commit 3eae8296718cb8f9b4af6ddd4f15f27a100bf1af Author: MOUAHA <mouahajoyce25@gmail.com> Date: Tue Apr 15 09:55:49 2025 +0200 Initial commit commit a7f7260d464659c71e7ff6b551a3b9ac6ccf8433 Author: Ch3rry <74537660+ch3rry0@users.noreply.github.com> Date: Tue Apr 15 09:32:36 2025 +0200 Complete index.md and README.md (Contributeur-3)","title":"Log Contributeur 3"},{"location":"logs/log-initiateur/","text":"Log Initiateur ```bash commit 1d4a1e2d7c38c21c7abccfd8190e6ddabb909417 (HEAD -> add-log-initiateur, ori gin/main, origin/HEAD, main) Merge: b22a602 e281df6 Author: MOUAHA mouahajoyce25@gmail.com Date: Tue Apr 15 11:08:18 2025 +0200 R\u00e9solution des conflits commit b22a6027b91d246d61e489cb08a67035a9381fb2 Author: MOUAHA mouahajoyce25@gmail.com Date: Tue Apr 15 11:04:14 2025 +0200 Refactor documentation and pushed log initateur commit e281df61399d49372e23fb0b71bd2ce2f17bb08a Author: JOYCIDA 169137397+JOYCIDA@users.noreply.github.com Date: Tue Apr 15 10:54:39 2025 +0200 Update .gitignore commit d7c18d7b3a7101aa1012242575a2115684f63a09 Merge: 4d70085 6a6e59c Author: JOYCIDA 169137397+JOYCIDA@users.noreply.github.com","title":"Initiateur"},{"location":"logs/log-initiateur/#log-initiateur","text":"```bash commit 1d4a1e2d7c38c21c7abccfd8190e6ddabb909417 (HEAD -> add-log-initiateur, ori gin/main, origin/HEAD, main) Merge: b22a602 e281df6 Author: MOUAHA mouahajoyce25@gmail.com Date: Tue Apr 15 11:08:18 2025 +0200 R\u00e9solution des conflits commit b22a6027b91d246d61e489cb08a67035a9381fb2 Author: MOUAHA mouahajoyce25@gmail.com Date: Tue Apr 15 11:04:14 2025 +0200 Refactor documentation and pushed log initateur commit e281df61399d49372e23fb0b71bd2ce2f17bb08a Author: JOYCIDA 169137397+JOYCIDA@users.noreply.github.com Date: Tue Apr 15 10:54:39 2025 +0200 Update .gitignore commit d7c18d7b3a7101aa1012242575a2115684f63a09 Merge: 4d70085 6a6e59c Author: JOYCIDA 169137397+JOYCIDA@users.noreply.github.com","title":"Log Initiateur"}]}